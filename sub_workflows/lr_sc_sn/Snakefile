configfile: "config/config.yaml"
envvars:
    "GITHUB_TOKEN"

# Load the configuration
sys.path.insert(0, config['main_wf_dir'] + "/config/")
import config_parser
from os.path import join
config = config_parser.sub_wf_config_parser(
   main_cfg_fn = config['global_config_path'], 
   sub_wf_name = "lr_sc_sn")

# subsample
if config.get("subsample_read_n"):
    # copy the raw fastq files
    raw_fastq_dir = config['samples_fastq_dir'].copy()
    subsample_read_n = config['subsample_read_n']
    subsample_dir =  config['subsample_dir']
    # modify the input path
    for sample in config['sample_id']:
        config['samples_fastq_dir'][sample] = \
            os.path.join(subsample_dir, 
                            f"subsample_n_{subsample_read_n}/{sample}.subsampled.fastq")  
    include: "rules/subsample.smk"




main_conda = config["conda"]["main"]
results_dir = config["output_path"]
scratch_dir = config["scratch_dir"]
git_repo = config["git_repo_dir"]
flag_dir = config['flag_dir']

include: "rules/flames.smk"
include: "rules/qc.smk"
include: "rules/internal_priming.smk"
include: "rules/mutation.smk"
# include: "rules/.vireo.smk"
include: "rules/emptydrop.smk"
include: "rules/sc_clustering.smk"
include: "rules/pseudo_bulk_map_n_quant.smk"
include: "rules/pseudo_bulk_qc.smk"
include: config['main_wf_dir'] + "/modules/utilities.smk"


rule all: 
    input:
        # all qc
        rules.flames.output,
        rules.qc.output,
        # rules.run_vireo.output,
        #rules.emptydrop.output,
        rules.run_all_rmarkdown.input,
        rules.plot_silhouette.output,
        rules.pseudo_bulk_oarfish_map_n_quant.input,
        rules.pseudobulk_qc.output,
        rules.variant_calling.output
    output:
        touch(os.path.join(results_dir, ".flag/all.done"))

configfile: "config/config.yaml"
envvars:
    "GITHUB_TOKEN"

# Load the configuration
sys.path.insert(0, config['main_wf_dir'] + "/config/")
import config_parser
config = config_parser.sub_wf_config_parser(
   main_cfg_fn = config['global_config_path'], 
   sub_wf_name = "lr_sc_sn")

# subsample
if config.get("subsample_read_n"):
    # copy the raw fastq files
    raw_fastq_dir = config['samples_fastq_dir'].copy()
    subsample_read_n = config['subsample_read_n']
    subsample_dir =  config['subsample_dir']
    # modify the input path
    for sample in config['sample_id']:
        config['samples_fastq_dir'][sample] = \
            os.path.join(subsample_dir, 
                            f"subsample_n_{subsample_read_n}/{sample}.subsampled.fastq")
                            

include: "rules/subsample.smk"
include: "rules/flames.smk"
include: "rules/qc.smk"
include: "rules/internal_priming.smk"
include: "rules/mutation.smk"
include: "rules/demuxlet.smk"
include: "rules/emptydrop.smk"
include: "rules/sc_clustering.smk"
include: "rules/pseudo_bulk_salmon_quant.smk"
include: config['main_wf_dir'] + "/modules/utilities.smk"


rule all: 
    input:
        # all qc
        rules.flames.output,
        rules.qc.output,
        rules.demuxlet.output,
        rules.emptydrop.output,
        rules.run_all_rmarkdown.input,
        rules.plot_silhouette.output,
        rules.pseudo_bulk_salmon_quant.input
    output:
        touch(os.path.join(results_dir, ".flag/all.done"))

# rule internal_priming_analysis:
#     input:
#         expand(".flag/{sample}_internal_priming.done",
#         sample=config["sample_id"])
    
# rule run_all_qc:
#     input:

#         os.path.join(results_dir, "qc/.flag/all_qc.done")

# rule run_flames_quant_only_no_identification_tmp:
#     input:
#          expand(".flag/flames_{sample}_tmp.done", sample=config["sample_id"])

# rule run_flames:
#     input:
#          expand(".flag/flames_{sample}.done", sample=config["sample_id"])

# rule get_read_length:
#     input:
#         expand(config['output_path'] + "/read_length_analysis/{x}.read_length.txt",
#                 x = config['sample_id'])



# rule run_demuxlet:
#     input:
#         expand(config['output_path'] + '/demuxlet/{sample}.demuxlet.best',
#                 sample = config['sample_id'])

# rule run_demuxlet_cluster:
#     input:
#         expand(config['output_path'] + '/demuxlet/{sample}.res{res}.cluster.demuxlet.best',
#                 sample = 'ont_sn', res = ['0.5', '5', '40'])

# rule run_demuxlet_cluster_filter_deconX_contaminantions:
#     input:
#         expand(config['output_path'] + '/demuxlet/{sample}.cluster_v2.demuxlet.best',
#                 sample = 'ont_sn')

        
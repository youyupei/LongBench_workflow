configfile: "config/config.yaml"
envvars:
    "GITHUB_TOKEN"

sys.path.insert(0, config['main_wf_dir'] + "/config/")
import config_parser

# Load the configuration
config = config_parser.sub_wf_config_parser(
   main_cfg_fn = config['global_config_path'], 
   sub_wf_name = "lr_bulk")

# subsample

if config.get("subsample_read_n"):
   # copy the raw fastq files
   raw_fastq_dir = config['samples_fastq_dir'].copy()
   subsample_read_n = config['subsample_read_n']
   subsample_dir =  config['subsample_dir']
    # modify the input path
   for sample in config['sample_id']:
      config['samples_fastq_dir'][sample] = \
         os.path.join(subsample_dir, 
                           f"subsample_n_{subsample_read_n}/{sample}")
   include: "rules/subsample.smk"

# define the input fastq directories
input_fastq_dirs = config["samples_fastq_dir"]
results_dir = config["output_path"]
scratch_dir = config["scratch_dir"]
barcode_list = config['barcode_list']
sub_wf_dir = config['sub_wf_dir']


include: "rules/minimap2.smk"
include: "rules/internal_priming.smk"
include: "rules/qc.smk"
include: "rules/quantification_salmon_oarfish.smk"
include: "rules/quantification_kallisto.smk"
include: config['main_wf_dir'] + "/modules/utilities.smk"

# make sure the results_dir exists
shell("mkdir -p {results_dir}")

# These wildcards names are reserved for special meanings
wildcard_constraints:
   cell_line='|'.join(config['cell_lines']),
   sample='|'.join(config['sample_id'])

# Main rule
rule all:
   input:
      # results_dir + "/.flag/run_all_mapping.done",
      rules.run_all_mapping.output,
      rules.run_quantification.output,
      rules.qc.output,
      #rules.run_kallisto.output
   output:
      touch(os.path.join(results_dir, ".flag/all.done"))